// This file was auto-generated by Flurl.CodeGen. Do not edit directly.
using System;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Notio.Http.Configuration;
using Notio.Http.Content;
using Notio.Http.Cookie;
using Notio.Http.Extensions;
using Notio.Http.Interfaces;
using Notio.Http.Model;
using Notio.Http.Utils;

namespace Notio.Http.Extensions;

/// <summary>
/// Fluent extension methods on String, Url, Uri, and IRequest.
/// </summary>
public static class GeneratedExtensions
{
    /// <summary>
    /// Sends an asynchronous request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="verb">The HTTP verb used to make the request.</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> SendJsonAsync(this IRequest request, HttpMethod verb, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        request.EnsureClient();
        var content = new CapturedJsonContent(request.Settings.JsonSerializer.Serialize(body));
        return request.SendAsync(verb, content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="verb">The HTTP verb used to make the request.</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> SendStringAsync(this IRequest request, HttpMethod verb, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        request.EnsureClient();
        var content = new CapturedStringContent(body);
        return request.SendAsync(verb, content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="verb">The HTTP verb used to make the request.</param>
    /// <param name="body">An object representing the request body, which will be serialized to a URL-encoded string.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> SendUrlEncodedAsync(this IRequest request, HttpMethod verb, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        request.EnsureClient();
        var content = new CapturedUrlEncodedContent(request.Settings.UrlEncodedSerializer.Serialize(body));
        return request.SendAsync(verb, content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous GET request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> GetAsync(this IRequest request, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return request.SendAsync(HttpMethod.Get, null, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous GET request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the JSON response body deserialized to an object of type T.</returns>
    public static Task<T> GetJsonAsync<T>(this IRequest request, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return request.SendAsync(HttpMethod.Get, null, completionOption, cancellationToken).ReceiveJson<T>();
    }

    /// <summary>
    /// Sends an asynchronous GET request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the response body as a string.</returns>
    public static Task<string> GetStringAsync(this IRequest request, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return request.SendAsync(HttpMethod.Get, null, completionOption, cancellationToken).ReceiveString();
    }

    /// <summary>
    /// Sends an asynchronous GET request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the response body as a Stream.</returns>
    public static Task<Stream> GetStreamAsync(this IRequest request, HttpCompletionOption completionOption = HttpCompletionOption.ResponseHeadersRead, CancellationToken cancellationToken = default)
    {
        return request.SendAsync(HttpMethod.Get, null, completionOption, cancellationToken).ReceiveStream();
    }

    /// <summary>
    /// Sends an asynchronous GET request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the response body as a byte array.</returns>
    public static Task<byte[]> GetBytesAsync(this IRequest request, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return request.SendAsync(HttpMethod.Get, null, completionOption, cancellationToken).ReceiveBytes();
    }

    /// <summary>
    /// Sends an asynchronous POST request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="content">The request body content.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostAsync(this IRequest request, HttpContent content = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return request.SendAsync(HttpMethod.Post, content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous POST request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostJsonAsync(this IRequest request, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        request.EnsureClient();
        var content = new CapturedJsonContent(request.Settings.JsonSerializer.Serialize(body));
        return request.SendAsync(HttpMethod.Post, content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous POST request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostStringAsync(this IRequest request, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        request.EnsureClient();
        var content = new CapturedStringContent(body);
        return request.SendAsync(HttpMethod.Post, content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous POST request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="body">An object representing the request body, which will be serialized to a URL-encoded string.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostUrlEncodedAsync(this IRequest request, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        request.EnsureClient();
        var content = new CapturedUrlEncodedContent(request.Settings.UrlEncodedSerializer.Serialize(body));
        return request.SendAsync(HttpMethod.Post, content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous HEAD request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> HeadAsync(this IRequest request, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return request.SendAsync(HttpMethod.Head, null, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous PUT request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="content">The request body content.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PutAsync(this IRequest request, HttpContent content = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return request.SendAsync(HttpMethod.Put, content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous PUT request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PutJsonAsync(this IRequest request, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        request.EnsureClient();
        var content = new CapturedJsonContent(request.Settings.JsonSerializer.Serialize(body));
        return request.SendAsync(HttpMethod.Put, content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous PUT request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PutStringAsync(this IRequest request, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        request.EnsureClient();
        var content = new CapturedStringContent(body);
        return request.SendAsync(HttpMethod.Put, content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous DELETE request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> DeleteAsync(this IRequest request, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return request.SendAsync(HttpMethod.Delete, null, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous PATCH request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="content">The request body content.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PatchAsync(this IRequest request, HttpContent content = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return request.SendAsync(new HttpMethod("PATCH"), content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous PATCH request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PatchJsonAsync(this IRequest request, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        request.EnsureClient();
        var content = new CapturedJsonContent(request.Settings.JsonSerializer.Serialize(body));
        return request.SendAsync(new HttpMethod("PATCH"), content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous PATCH request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PatchStringAsync(this IRequest request, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        request.EnsureClient();
        var content = new CapturedStringContent(body);
        return request.SendAsync(new HttpMethod("PATCH"), content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Sends an asynchronous OPTIONS request.
    /// </summary>
    /// <param name="request">This IRequest</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> OptionsAsync(this IRequest request, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return request.SendAsync(HttpMethod.Options, null, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="verb">The HTTP verb used to make the request.</param>
    /// <param name="content">The request body content.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> SendAsync(this Url url, HttpMethod verb, HttpContent content = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).SendAsync(verb, content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="verb">The HTTP verb used to make the request.</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> SendJsonAsync(this Url url, HttpMethod verb, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).SendJsonAsync(verb, body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="verb">The HTTP verb used to make the request.</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> SendStringAsync(this Url url, HttpMethod verb, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).SendStringAsync(verb, body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="verb">The HTTP verb used to make the request.</param>
    /// <param name="body">An object representing the request body, which will be serialized to a URL-encoded string.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> SendUrlEncodedAsync(this Url url, HttpMethod verb, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).SendUrlEncodedAsync(verb, body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous GET request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> GetAsync(this Url url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).GetAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous GET request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the JSON response body deserialized to an object of type T.</returns>
    public static Task<T> GetJsonAsync<T>(this Url url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).GetJsonAsync<T>(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous GET request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the response body as a string.</returns>
    public static Task<string> GetStringAsync(this Url url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).GetStringAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous GET request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the response body as a Stream.</returns>
    public static Task<Stream> GetStreamAsync(this Url url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseHeadersRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).GetStreamAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous GET request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the response body as a byte array.</returns>
    public static Task<byte[]> GetBytesAsync(this Url url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).GetBytesAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous POST request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="content">The request body content.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostAsync(this Url url, HttpContent content = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PostAsync(content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous POST request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostJsonAsync(this Url url, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PostJsonAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous POST request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostStringAsync(this Url url, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PostStringAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous POST request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="body">An object representing the request body, which will be serialized to a URL-encoded string.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostUrlEncodedAsync(this Url url, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PostUrlEncodedAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous HEAD request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> HeadAsync(this Url url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).HeadAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PUT request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="content">The request body content.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PutAsync(this Url url, HttpContent content = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PutAsync(content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PUT request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PutJsonAsync(this Url url, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PutJsonAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PUT request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PutStringAsync(this Url url, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PutStringAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous DELETE request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> DeleteAsync(this Url url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).DeleteAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PATCH request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="content">The request body content.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PatchAsync(this Url url, HttpContent content = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PatchAsync(content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PATCH request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PatchJsonAsync(this Url url, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PatchJsonAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PATCH request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PatchStringAsync(this Url url, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PatchStringAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous OPTIONS request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> OptionsAsync(this Url url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).OptionsAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a new Request and asynchronously downloads a file.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="localFolderPath">Path of local folder where file is to be downloaded.</param>
    /// <param name="localFileName">Name of local file. If not specified, the source filename (last segment of the URL) is used.</param>
    /// <param name="bufferSize">Buffer size in bytes. Default is 4096.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the local path of the downloaded file.</returns>
    public static Task<string> DownloadFileAsync(this Url url, string localFolderPath, string localFileName = null, int bufferSize = 4096, HttpCompletionOption completionOption = HttpCompletionOption.ResponseHeadersRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).DownloadFileAsync(localFolderPath, localFileName, bufferSize, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous multipart/form-data POST request.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="buildContent">A delegate for building the content parts.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostMultipartAsync(this Url url, Action<CapturedMultipartContent> buildContent, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PostMultipartAsync(buildContent, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a new Request and sets a request header.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="name">The header name.</param>
    /// <param name="value">The header value.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithHeader(this Url url, string name, object value)
    {
        return new Request(url).WithHeader(name, value);
    }

    /// <summary>
    /// Creates a new Request and sets request headers based on property names/values of the provided object, or keys/values if object is a dictionary, to be sent.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="headers">Names/values of HTTP headers to set. Typically an anonymous object or IDictionary.</param>
    /// <param name="replaceUnderscoreWithHyphen">If true, underscores in property names will be replaced by hyphens. Default is true.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithHeaders(this Url url, object headers, bool replaceUnderscoreWithHyphen = true)
    {
        return new Request(url).WithHeaders(headers, replaceUnderscoreWithHyphen);
    }

    /// <summary>
    /// Creates a new Request and sets the Authorization header according to Basic Authentication protocol.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="username">Username of authenticating user.</param>
    /// <param name="password">Password of authenticating user.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithBasicAuth(this Url url, string username, string password)
    {
        return new Request(url).WithBasicAuth(username, password);
    }

    /// <summary>
    /// Creates a new Request and sets the Authorization header with a bearer token according to OAuth 2.0 specification.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="token">The acquired oAuth bearer token.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithOAuthBearerToken(this Url url, string token)
    {
        return new Request(url).WithOAuthBearerToken(token);
    }

    /// <summary>
    /// Creates a new Request and adds a name-value pair to its Cookie header. To automatically maintain a cookie "session", consider using a CookieJar or CookieSession instead.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="name">The cookie name.</param>
    /// <param name="value">The cookie value.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithCookie(this Url url, string name, object value)
    {
        return new Request(url).WithCookie(name, value);
    }

    /// <summary>
    /// Creates a new Request and adds name-value pairs to its Cookie header based on property names/values of the provided object, or keys/values if object is a dictionary. To automatically maintain a cookie "session", consider using a CookieJar or CookieSession instead.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="values">Names/values of HTTP cookies to set. Typically an anonymous object or IDictionary.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithCookies(this Url url, object values)
    {
        return new Request(url).WithCookies(values);
    }

    /// <summary>
    /// Creates a new Request and sets the CookieJar associated with this request, which will be updated with any Set-Cookie headers present in the response and is suitable for reuse in subsequent requests.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="cookieJar">The CookieJar.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithCookies(this Url url, CookieJar cookieJar)
    {
        return new Request(url).WithCookies(cookieJar);
    }

    /// <summary>
    /// Creates a new Request and associates it with a new CookieJar, which will be updated with any Set-Cookie headers present in the response and is suitable for reuse in subsequent requests.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="cookieJar">The created CookieJar, which can be reused in subsequent requests.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithCookies(this Url url, out CookieJar cookieJar)
    {
        return new Request(url).WithCookies(out cookieJar);
    }

    /// <summary>
    /// Creates a new Request and allows changing its Settings inline.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="action">A delegate defining the Settings changes.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithSettings(this Url url, Action<HttpSettings> action)
    {
        return new Request(url).WithSettings(action);
    }

    /// <summary>
    /// Creates a new Request and sets the request timeout.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="timespan">Time to wait before the request times out.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithTimeout(this Url url, TimeSpan timespan)
    {
        return new Request(url).WithTimeout(timespan);
    }

    /// <summary>
    /// Creates a new Request and sets the request timeout.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="seconds">Seconds to wait before the request times out.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithTimeout(this Url url, int seconds)
    {
        return new Request(url).WithTimeout(seconds);
    }

    /// <summary>
    /// Creates a new Request and adds a pattern representing an HTTP status code or range of codes which (in addition to 2xx) will NOT result in a HttpException being thrown.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="pattern">Examples: "3xx", "100,300,600", "100-299,6xx"</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest AllowHttpStatus(this Url url, string pattern)
    {
        return new Request(url).AllowHttpStatus(pattern);
    }

    /// <summary>
    /// Creates a new Request and adds one or more response status codes which (in addition to 2xx) will NOT result in a HttpException being thrown.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="statusCodes">One or more response status codes that, when received, will not cause an exception to be thrown.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest AllowHttpStatus(this Url url, params int[] statusCodes)
    {
        return new Request(url).AllowHttpStatus(statusCodes);
    }

    /// <summary>
    /// Creates a new Request and configures it to allow any returned HTTP status without throwing a HttpException.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest AllowAnyHttpStatus(this Url url)
    {
        return new Request(url).AllowAnyHttpStatus();
    }

    /// <summary>
    /// Creates a new Request and configures whether redirects are automatically followed.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="enabled">true if Flurl should automatically send a new request to the redirect URL, false if it should not.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithAutoRedirect(this Url url, bool enabled)
    {
        return new Request(url).WithAutoRedirect(enabled);
    }

    /// <summary>
    /// Creates a new Request and adds a new BeforeCall event handler.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="action">Action to perform when the BeforeCall event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest BeforeCall(this Url url, Action<NotioCall> action)
    {
        return new Request(url).BeforeCall(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new asynchronous BeforeCall event handler.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="action">Async action to perform when the BeforeCall event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest BeforeCall(this Url url, Func<NotioCall, Task> action)
    {
        return new Request(url).BeforeCall(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new AfterCall event handler.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="action">Action to perform when the AfterCall event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest AfterCall(this Url url, Action<NotioCall> action)
    {
        return new Request(url).AfterCall(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new asynchronous AfterCall event handler.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="action">Async action to perform when the AfterCall event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest AfterCall(this Url url, Func<NotioCall, Task> action)
    {
        return new Request(url).AfterCall(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new OnError event handler.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="action">Action to perform when the OnError event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest OnError(this Url url, Action<NotioCall> action)
    {
        return new Request(url).OnError(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new asynchronous OnError event handler.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="action">Async action to perform when the OnError event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest OnError(this Url url, Func<NotioCall, Task> action)
    {
        return new Request(url).OnError(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new OnRedirect event handler.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="action">Action to perform when the OnRedirect event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest OnRedirect(this Url url, Action<NotioCall> action)
    {
        return new Request(url).OnRedirect(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new asynchronous OnRedirect event handler.
    /// </summary>
    /// <param name="url">This Flurl.Url.</param>
    /// <param name="action">Async action to perform when the OnRedirect event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest OnRedirect(this Url url, Func<NotioCall, Task> action)
    {
        return new Request(url).OnRedirect(action);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="verb">The HTTP verb used to make the request.</param>
    /// <param name="content">The request body content.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> SendAsync(this string url, HttpMethod verb, HttpContent content = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).SendAsync(verb, content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="verb">The HTTP verb used to make the request.</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> SendJsonAsync(this string url, HttpMethod verb, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).SendJsonAsync(verb, body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="verb">The HTTP verb used to make the request.</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> SendStringAsync(this string url, HttpMethod verb, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).SendStringAsync(verb, body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="verb">The HTTP verb used to make the request.</param>
    /// <param name="body">An object representing the request body, which will be serialized to a URL-encoded string.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> SendUrlEncodedAsync(this string url, HttpMethod verb, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).SendUrlEncodedAsync(verb, body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous GET request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> GetAsync(this string url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).GetAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous GET request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the JSON response body deserialized to an object of type T.</returns>
    public static Task<T> GetJsonAsync<T>(this string url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).GetJsonAsync<T>(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous GET request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the response body as a string.</returns>
    public static Task<string> GetStringAsync(this string url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).GetStringAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous GET request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the response body as a Stream.</returns>
    public static Task<Stream> GetStreamAsync(this string url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseHeadersRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).GetStreamAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous GET request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the response body as a byte array.</returns>
    public static Task<byte[]> GetBytesAsync(this string url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).GetBytesAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous POST request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="content">The request body content.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostAsync(this string url, HttpContent content = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PostAsync(content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous POST request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostJsonAsync(this string url, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PostJsonAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous POST request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostStringAsync(this string url, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PostStringAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous POST request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="body">An object representing the request body, which will be serialized to a URL-encoded string.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostUrlEncodedAsync(this string url, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PostUrlEncodedAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous HEAD request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> HeadAsync(this string url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).HeadAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PUT request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="content">The request body content.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PutAsync(this string url, HttpContent content = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PutAsync(content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PUT request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PutJsonAsync(this string url, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PutJsonAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PUT request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PutStringAsync(this string url, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PutStringAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous DELETE request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> DeleteAsync(this string url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).DeleteAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PATCH request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="content">The request body content.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PatchAsync(this string url, HttpContent content = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PatchAsync(content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PATCH request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PatchJsonAsync(this string url, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PatchJsonAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PATCH request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PatchStringAsync(this string url, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PatchStringAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous OPTIONS request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> OptionsAsync(this string url, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).OptionsAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a new Request and asynchronously downloads a file.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="localFolderPath">Path of local folder where file is to be downloaded.</param>
    /// <param name="localFileName">Name of local file. If not specified, the source filename (last segment of the URL) is used.</param>
    /// <param name="bufferSize">Buffer size in bytes. Default is 4096.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the local path of the downloaded file.</returns>
    public static Task<string> DownloadFileAsync(this string url, string localFolderPath, string localFileName = null, int bufferSize = 4096, HttpCompletionOption completionOption = HttpCompletionOption.ResponseHeadersRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).DownloadFileAsync(localFolderPath, localFileName, bufferSize, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous multipart/form-data POST request.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="buildContent">A delegate for building the content parts.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostMultipartAsync(this string url, Action<CapturedMultipartContent> buildContent, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(url).PostMultipartAsync(buildContent, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a new Request and sets a request header.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="name">The header name.</param>
    /// <param name="value">The header value.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithHeader(this string url, string name, object value)
    {
        return new Request(url).WithHeader(name, value);
    }

    /// <summary>
    /// Creates a new Request and sets request headers based on property names/values of the provided object, or keys/values if object is a dictionary, to be sent.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="headers">Names/values of HTTP headers to set. Typically an anonymous object or IDictionary.</param>
    /// <param name="replaceUnderscoreWithHyphen">If true, underscores in property names will be replaced by hyphens. Default is true.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithHeaders(this string url, object headers, bool replaceUnderscoreWithHyphen = true)
    {
        return new Request(url).WithHeaders(headers, replaceUnderscoreWithHyphen);
    }

    /// <summary>
    /// Creates a new Request and sets the Authorization header according to Basic Authentication protocol.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="username">Username of authenticating user.</param>
    /// <param name="password">Password of authenticating user.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithBasicAuth(this string url, string username, string password)
    {
        return new Request(url).WithBasicAuth(username, password);
    }

    /// <summary>
    /// Creates a new Request and sets the Authorization header with a bearer token according to OAuth 2.0 specification.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="token">The acquired oAuth bearer token.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithOAuthBearerToken(this string url, string token)
    {
        return new Request(url).WithOAuthBearerToken(token);
    }

    /// <summary>
    /// Creates a new Request and adds a name-value pair to its Cookie header. To automatically maintain a cookie "session", consider using a CookieJar or CookieSession instead.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="name">The cookie name.</param>
    /// <param name="value">The cookie value.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithCookie(this string url, string name, object value)
    {
        return new Request(url).WithCookie(name, value);
    }

    /// <summary>
    /// Creates a new Request and adds name-value pairs to its Cookie header based on property names/values of the provided object, or keys/values if object is a dictionary. To automatically maintain a cookie "session", consider using a CookieJar or CookieSession instead.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="values">Names/values of HTTP cookies to set. Typically an anonymous object or IDictionary.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithCookies(this string url, object values)
    {
        return new Request(url).WithCookies(values);
    }

    /// <summary>
    /// Creates a new Request and sets the CookieJar associated with this request, which will be updated with any Set-Cookie headers present in the response and is suitable for reuse in subsequent requests.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="cookieJar">The CookieJar.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithCookies(this string url, CookieJar cookieJar)
    {
        return new Request(url).WithCookies(cookieJar);
    }

    /// <summary>
    /// Creates a new Request and associates it with a new CookieJar, which will be updated with any Set-Cookie headers present in the response and is suitable for reuse in subsequent requests.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="cookieJar">The created CookieJar, which can be reused in subsequent requests.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithCookies(this string url, out CookieJar cookieJar)
    {
        return new Request(url).WithCookies(out cookieJar);
    }

    /// <summary>
    /// Creates a new Request and allows changing its Settings inline.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="action">A delegate defining the Settings changes.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithSettings(this string url, Action<HttpSettings> action)
    {
        return new Request(url).WithSettings(action);
    }

    /// <summary>
    /// Creates a new Request and sets the request timeout.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="timespan">Time to wait before the request times out.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithTimeout(this string url, TimeSpan timespan)
    {
        return new Request(url).WithTimeout(timespan);
    }

    /// <summary>
    /// Creates a new Request and sets the request timeout.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="seconds">Seconds to wait before the request times out.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithTimeout(this string url, int seconds)
    {
        return new Request(url).WithTimeout(seconds);
    }

    /// <summary>
    /// Creates a new Request and adds a pattern representing an HTTP status code or range of codes which (in addition to 2xx) will NOT result in a HttpException being thrown.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="pattern">Examples: "3xx", "100,300,600", "100-299,6xx"</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest AllowHttpStatus(this string url, string pattern)
    {
        return new Request(url).AllowHttpStatus(pattern);
    }

    /// <summary>
    /// Creates a new Request and adds one or more response status codes which (in addition to 2xx) will NOT result in a HttpException being thrown.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="statusCodes">One or more response status codes that, when received, will not cause an exception to be thrown.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest AllowHttpStatus(this string url, params int[] statusCodes)
    {
        return new Request(url).AllowHttpStatus(statusCodes);
    }

    /// <summary>
    /// Creates a new Request and configures it to allow any returned HTTP status without throwing a HttpException.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest AllowAnyHttpStatus(this string url)
    {
        return new Request(url).AllowAnyHttpStatus();
    }

    /// <summary>
    /// Creates a new Request and configures whether redirects are automatically followed.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="enabled">true if Flurl should automatically send a new request to the redirect URL, false if it should not.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithAutoRedirect(this string url, bool enabled)
    {
        return new Request(url).WithAutoRedirect(enabled);
    }

    /// <summary>
    /// Creates a new Request and adds a new BeforeCall event handler.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="action">Action to perform when the BeforeCall event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest BeforeCall(this string url, Action<NotioCall> action)
    {
        return new Request(url).BeforeCall(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new asynchronous BeforeCall event handler.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="action">Async action to perform when the BeforeCall event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest BeforeCall(this string url, Func<NotioCall, Task> action)
    {
        return new Request(url).BeforeCall(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new AfterCall event handler.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="action">Action to perform when the AfterCall event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest AfterCall(this string url, Action<NotioCall> action)
    {
        return new Request(url).AfterCall(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new asynchronous AfterCall event handler.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="action">Async action to perform when the AfterCall event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest AfterCall(this string url, Func<NotioCall, Task> action)
    {
        return new Request(url).AfterCall(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new OnError event handler.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="action">Action to perform when the OnError event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest OnError(this string url, Action<NotioCall> action)
    {
        return new Request(url).OnError(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new asynchronous OnError event handler.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="action">Async action to perform when the OnError event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest OnError(this string url, Func<NotioCall, Task> action)
    {
        return new Request(url).OnError(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new OnRedirect event handler.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="action">Action to perform when the OnRedirect event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest OnRedirect(this string url, Action<NotioCall> action)
    {
        return new Request(url).OnRedirect(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new asynchronous OnRedirect event handler.
    /// </summary>
    /// <param name="url">This URL.</param>
    /// <param name="action">Async action to perform when the OnRedirect event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest OnRedirect(this string url, Func<NotioCall, Task> action)
    {
        return new Request(url).OnRedirect(action);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="verb">The HTTP verb used to make the request.</param>
    /// <param name="content">The request body content.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> SendAsync(this Uri uri, HttpMethod verb, HttpContent content = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).SendAsync(verb, content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="verb">The HTTP verb used to make the request.</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> SendJsonAsync(this Uri uri, HttpMethod verb, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).SendJsonAsync(verb, body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="verb">The HTTP verb used to make the request.</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> SendStringAsync(this Uri uri, HttpMethod verb, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).SendStringAsync(verb, body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="verb">The HTTP verb used to make the request.</param>
    /// <param name="body">An object representing the request body, which will be serialized to a URL-encoded string.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> SendUrlEncodedAsync(this Uri uri, HttpMethod verb, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).SendUrlEncodedAsync(verb, body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous GET request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> GetAsync(this Uri uri, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).GetAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous GET request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the JSON response body deserialized to an object of type T.</returns>
    public static Task<T> GetJsonAsync<T>(this Uri uri, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).GetJsonAsync<T>(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous GET request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the response body as a string.</returns>
    public static Task<string> GetStringAsync(this Uri uri, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).GetStringAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous GET request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the response body as a Stream.</returns>
    public static Task<Stream> GetStreamAsync(this Uri uri, HttpCompletionOption completionOption = HttpCompletionOption.ResponseHeadersRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).GetStreamAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous GET request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the response body as a byte array.</returns>
    public static Task<byte[]> GetBytesAsync(this Uri uri, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).GetBytesAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous POST request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="content">The request body content.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostAsync(this Uri uri, HttpContent content = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).PostAsync(content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous POST request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostJsonAsync(this Uri uri, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).PostJsonAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous POST request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostStringAsync(this Uri uri, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).PostStringAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous POST request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="body">An object representing the request body, which will be serialized to a URL-encoded string.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostUrlEncodedAsync(this Uri uri, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).PostUrlEncodedAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous HEAD request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> HeadAsync(this Uri uri, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).HeadAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PUT request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="content">The request body content.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PutAsync(this Uri uri, HttpContent content = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).PutAsync(content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PUT request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PutJsonAsync(this Uri uri, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).PutJsonAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PUT request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PutStringAsync(this Uri uri, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).PutStringAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous DELETE request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> DeleteAsync(this Uri uri, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).DeleteAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PATCH request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="content">The request body content.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PatchAsync(this Uri uri, HttpContent content = null, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).PatchAsync(content, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PATCH request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="body">An object representing the request body, which will be serialized to JSON.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PatchJsonAsync(this Uri uri, object body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).PatchJsonAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous PATCH request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="body">The request body.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PatchStringAsync(this Uri uri, string body, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).PatchStringAsync(body, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous OPTIONS request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> OptionsAsync(this Uri uri, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).OptionsAsync(completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a new Request and asynchronously downloads a file.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="localFolderPath">Path of local folder where file is to be downloaded.</param>
    /// <param name="localFileName">Name of local file. If not specified, the source filename (last segment of the URL) is used.</param>
    /// <param name="bufferSize">Buffer size in bytes. Default is 4096.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the local path of the downloaded file.</returns>
    public static Task<string> DownloadFileAsync(this Uri uri, string localFolderPath, string localFileName = null, int bufferSize = 4096, HttpCompletionOption completionOption = HttpCompletionOption.ResponseHeadersRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).DownloadFileAsync(localFolderPath, localFileName, bufferSize, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a Request and sends an asynchronous multipart/form-data POST request.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="buildContent">A delegate for building the content parts.</param>
    /// <param name="completionOption">The HttpCompletionOption used in the request. Optional.</param>
    /// <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    /// <returns>A Task whose result is the received IResponse.</returns>
    public static Task<IResponse> PostMultipartAsync(this Uri uri, Action<CapturedMultipartContent> buildContent, HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead, CancellationToken cancellationToken = default)
    {
        return new Request(uri).PostMultipartAsync(buildContent, completionOption, cancellationToken);
    }

    /// <summary>
    /// Creates a new Request and sets a request header.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="name">The header name.</param>
    /// <param name="value">The header value.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithHeader(this Uri uri, string name, object value)
    {
        return new Request(uri).WithHeader(name, value);
    }

    /// <summary>
    /// Creates a new Request and sets request headers based on property names/values of the provided object, or keys/values if object is a dictionary, to be sent.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="headers">Names/values of HTTP headers to set. Typically an anonymous object or IDictionary.</param>
    /// <param name="replaceUnderscoreWithHyphen">If true, underscores in property names will be replaced by hyphens. Default is true.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithHeaders(this Uri uri, object headers, bool replaceUnderscoreWithHyphen = true)
    {
        return new Request(uri).WithHeaders(headers, replaceUnderscoreWithHyphen);
    }

    /// <summary>
    /// Creates a new Request and sets the Authorization header according to Basic Authentication protocol.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="username">Username of authenticating user.</param>
    /// <param name="password">Password of authenticating user.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithBasicAuth(this Uri uri, string username, string password)
    {
        return new Request(uri).WithBasicAuth(username, password);
    }

    /// <summary>
    /// Creates a new Request and sets the Authorization header with a bearer token according to OAuth 2.0 specification.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="token">The acquired oAuth bearer token.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithOAuthBearerToken(this Uri uri, string token)
    {
        return new Request(uri).WithOAuthBearerToken(token);
    }

    /// <summary>
    /// Creates a new Request and adds a name-value pair to its Cookie header. To automatically maintain a cookie "session", consider using a CookieJar or CookieSession instead.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="name">The cookie name.</param>
    /// <param name="value">The cookie value.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithCookie(this Uri uri, string name, object value)
    {
        return new Request(uri).WithCookie(name, value);
    }

    /// <summary>
    /// Creates a new Request and adds name-value pairs to its Cookie header based on property names/values of the provided object, or keys/values if object is a dictionary. To automatically maintain a cookie "session", consider using a CookieJar or CookieSession instead.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="values">Names/values of HTTP cookies to set. Typically an anonymous object or IDictionary.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithCookies(this Uri uri, object values)
    {
        return new Request(uri).WithCookies(values);
    }

    /// <summary>
    /// Creates a new Request and sets the CookieJar associated with this request, which will be updated with any Set-Cookie headers present in the response and is suitable for reuse in subsequent requests.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="cookieJar">The CookieJar.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithCookies(this Uri uri, CookieJar cookieJar)
    {
        return new Request(uri).WithCookies(cookieJar);
    }

    /// <summary>
    /// Creates a new Request and associates it with a new CookieJar, which will be updated with any Set-Cookie headers present in the response and is suitable for reuse in subsequent requests.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="cookieJar">The created CookieJar, which can be reused in subsequent requests.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithCookies(this Uri uri, out CookieJar cookieJar)
    {
        return new Request(uri).WithCookies(out cookieJar);
    }

    /// <summary>
    /// Creates a new Request and allows changing its Settings inline.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="action">A delegate defining the Settings changes.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithSettings(this Uri uri, Action<HttpSettings> action)
    {
        return new Request(uri).WithSettings(action);
    }

    /// <summary>
    /// Creates a new Request and sets the request timeout.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="timespan">Time to wait before the request times out.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithTimeout(this Uri uri, TimeSpan timespan)
    {
        return new Request(uri).WithTimeout(timespan);
    }

    /// <summary>
    /// Creates a new Request and sets the request timeout.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="seconds">Seconds to wait before the request times out.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithTimeout(this Uri uri, int seconds)
    {
        return new Request(uri).WithTimeout(seconds);
    }

    /// <summary>
    /// Creates a new Request and adds a pattern representing an HTTP status code or range of codes which (in addition to 2xx) will NOT result in a HttpException being thrown.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="pattern">Examples: "3xx", "100,300,600", "100-299,6xx"</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest AllowHttpStatus(this Uri uri, string pattern)
    {
        return new Request(uri).AllowHttpStatus(pattern);
    }

    /// <summary>
    /// Creates a new Request and adds one or more response status codes which (in addition to 2xx) will NOT result in a HttpException being thrown.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="statusCodes">One or more response status codes that, when received, will not cause an exception to be thrown.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest AllowHttpStatus(this Uri uri, params int[] statusCodes)
    {
        return new Request(uri).AllowHttpStatus(statusCodes);
    }

    /// <summary>
    /// Creates a new Request and configures it to allow any returned HTTP status without throwing a HttpException.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest AllowAnyHttpStatus(this Uri uri)
    {
        return new Request(uri).AllowAnyHttpStatus();
    }

    /// <summary>
    /// Creates a new Request and configures whether redirects are automatically followed.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="enabled">true if Flurl should automatically send a new request to the redirect URL, false if it should not.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest WithAutoRedirect(this Uri uri, bool enabled)
    {
        return new Request(uri).WithAutoRedirect(enabled);
    }

    /// <summary>
    /// Creates a new Request and adds a new BeforeCall event handler.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="action">Action to perform when the BeforeCall event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest BeforeCall(this Uri uri, Action<NotioCall> action)
    {
        return new Request(uri).BeforeCall(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new asynchronous BeforeCall event handler.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="action">Async action to perform when the BeforeCall event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest BeforeCall(this Uri uri, Func<NotioCall, Task> action)
    {
        return new Request(uri).BeforeCall(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new AfterCall event handler.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="action">Action to perform when the AfterCall event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest AfterCall(this Uri uri, Action<NotioCall> action)
    {
        return new Request(uri).AfterCall(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new asynchronous AfterCall event handler.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="action">Async action to perform when the AfterCall event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest AfterCall(this Uri uri, Func<NotioCall, Task> action)
    {
        return new Request(uri).AfterCall(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new OnError event handler.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="action">Action to perform when the OnError event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest OnError(this Uri uri, Action<NotioCall> action)
    {
        return new Request(uri).OnError(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new asynchronous OnError event handler.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="action">Async action to perform when the OnError event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest OnError(this Uri uri, Func<NotioCall, Task> action)
    {
        return new Request(uri).OnError(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new OnRedirect event handler.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="action">Action to perform when the OnRedirect event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest OnRedirect(this Uri uri, Action<NotioCall> action)
    {
        return new Request(uri).OnRedirect(action);
    }

    /// <summary>
    /// Creates a new Request and adds a new asynchronous OnRedirect event handler.
    /// </summary>
    /// <param name="uri">This System.Uri.</param>
    /// <param name="action">Async action to perform when the OnRedirect event is raised.</param>
    /// <returns>A new IRequest.</returns>
    public static IRequest OnRedirect(this Uri uri, Func<NotioCall, Task> action)
    {
        return new Request(uri).OnRedirect(action);
    }

}
