@echo off
chcp 65001 >nul & rem ƒê·∫∑t UTF-8 ƒë·ªÉ hi·ªÉn th·ªã ti·∫øng Vi·ªát t·ªët h∆°n

:: ƒê·ªãnh nghƒ©a m√†u s·∫Øc
set COLOR_RESET=[0m
set COLOR_GREEN=[32m
set COLOR_YELLOW=[33m
set COLOR_RED=[31m
set COLOR_CYAN=[36m

echo %COLOR_CYAN%==============================================%COLOR_RESET%
echo       üî• GitHub Auto Commit & Version Updater üî•      
echo %COLOR_CYAN%==============================================%COLOR_RESET%
echo.

:: X√°c ƒë·ªãnh th∆∞ m·ª•c l√†m vi·ªác (l√πi 2 th∆∞ m·ª•c)
cd /d "%~dp0\..\.." || (
    echo %COLOR_RED%‚ùå L·ªói: Kh√¥ng th·ªÉ chuy·ªÉn th∆∞ m·ª•c!%COLOR_RESET%
    pause
    exit /b 1
)

:: Ki·ªÉm tra xem c√≥ ph·∫£i Git repo kh√¥ng
git rev-parse --is-inside-work-tree >nul 2>&1
if %ERRORLEVEL% neq 0 (
    echo %COLOR_RED%‚ùå L·ªói: Th∆∞ m·ª•c kh√¥ng ph·∫£i Git repo ho·∫∑c Git ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!%COLOR_RESET%
    pause
    exit /b 1
)

:: L·∫•y tag phi√™n b·∫£n m·ªõi nh·∫•t t·ª´ Git
set LAST_VERSION=
for /f "tokens=*" %%i in ('git tag --sort=-v:refname 2^>nul') do (
    set LAST_VERSION=%%i
    goto :FOUND_VERSION
)

:: N·∫øu kh√¥ng t√¨m th·∫•y tag, y√™u c·∫ßu nh·∫≠p th·ªß c√¥ng
:NOT_FOUND
echo %COLOR_YELLOW%‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y phi√™n b·∫£n h·ª£p l·ªá!%COLOR_RESET%
set /p LAST_VERSION=üî¢ Vui l√≤ng nh·∫≠p phi√™n b·∫£n m·ªõi (v√≠ d·ª•: 1.0.0): 
goto :CHECK_VERSION

:FOUND_VERSION
:: Ki·ªÉm tra tag c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng kh√¥ng (X.Y.Z)
echo %LAST_VERSION% | findstr /r "^[0-9]\+\.[0-9]\+\.[0-9]\+$" >nul
if %ERRORLEVEL% neq 0 goto :NOT_FOUND

:: Ki·ªÉm tra l·∫°i phi√™n b·∫£n v·ª´a nh·∫≠p ho·∫∑c l·∫•y t·ª´ tag
:CHECK_VERSION
for /f "tokens=1,2,3 delims=." %%a in ("%LAST_VERSION%") do (
    set MAJOR=%%a
    set MINOR=%%b
    set PATCH=%%c
)

:: Ki·ªÉm tra bi·∫øn c√≥ h·ª£p l·ªá kh√¥ng
if "%MAJOR%"=="" (
    echo %COLOR_RED%‚ùå L·ªói: Phi√™n b·∫£n kh√¥ng h·ª£p l·ªá!%COLOR_RESET%
    pause
    exit /b 1
)

:: TƒÉng phi√™n b·∫£n
set /a PATCH+=1
if %PATCH% gtr 99 (
    set /a PATCH=0
    set /a MINOR+=1
)

:: T·∫°o phi√™n b·∫£n m·ªõi
set NEW_VERSION=%MAJOR%.%MINOR%.%PATCH%

:: Hi·ªÉn th·ªã phi√™n b·∫£n m·ªõi v√† y√™u c·∫ßu x√°c nh·∫≠n
echo.
echo %COLOR_YELLOW%üìå Phi√™n b·∫£n m·ªõi: %NEW_VERSION%%COLOR_RESET%
echo %COLOR_CYAN%B·∫°n c√≥ mu·ªën commit v·ªõi phi√™n b·∫£n n√†y kh√¥ng? (Y/N)%COLOR_RESET%
set /p CONFIRM=Nh·∫≠p l·ª±a ch·ªçn: 
if /I not "%CONFIRM%"=="Y" (
    echo %COLOR_RED%‚ùå H·ªßy b·ªè commit!%COLOR_RESET%
    pause
    exit /b 0
)

:: Th·ª±c hi·ªán commit, tag v√† push
echo %COLOR_GREEN%üöÄ ƒêang commit v√† push l√™n GitHub...%COLOR_RESET%
git add .
git commit -m "Version %NEW_VERSION%"
git tag %NEW_VERSION%
git push origin HEAD --tags

:: Ki·ªÉm tra k·∫øt qu·∫£
if %ERRORLEVEL% neq 0 (
    echo %COLOR_RED%‚ùå L·ªói: Push l√™n GitHub th·∫•t b·∫°i!%COLOR_RESET%
    pause
    exit /b 1
)

echo %COLOR_GREEN%‚úÖ Th√†nh c√¥ng! ƒê√£ c·∫≠p nh·∫≠t phi√™n b·∫£n %NEW_VERSION% tr√™n GitHub.%COLOR_RESET%

:: Gi·ªØ c·ª≠a s·ªï m·ªü
echo.
pause
